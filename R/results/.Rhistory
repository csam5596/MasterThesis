library("kernlab")
.probPlatt
.probPlatt()
probPlatt()
kernlab::ksvm
setGeneric(".probPlatt", function(deci, yres) standardGeneric(".probPlatt"))
setMethod(".probPlatt",signature(deci="ANY"),
function(deci,yres)
{
stop("HERE")
cat("HERE")
if (is.matrix(deci))
deci <- as.vector(deci)
if (!is.vector(deci))
stop("input should be matrix or vector")
yres <- as.vector(yres)
## Create label and count priors
boolabel <- yres >= 0
prior1 <- sum(boolabel)
m <- length(yres)
prior0 <- m - prior1
## set parameters (should be on the interface I guess)
maxiter <- 100
minstep <- 1e-10
sigma <- 1e-3
eps <- 1e-5
## Construct target support
hiTarget <- (prior1 + 1)/(prior1 + 2)
loTarget <- 1/(prior0 + 2)
length <- prior1 + prior0
t <- rep(loTarget, m)
t[boolabel] <- hiTarget
##Initial Point & Initial Fun Value
A <- 0
B <- log((prior0 + 1)/(prior1 + 1))
fval <- 0
fApB <- deci*A + B
bindex <- fApB >= 0
p <- q <- rep(0,m)
fval <- sum(t[bindex]*fApB[bindex] + log(1 + exp(-fApB[bindex])))
fval <- fval + sum((t[!bindex] - 1)*fApB[!bindex] + log(1+exp(fApB[!bindex])))
for (it in 1:maxiter)
{
h11 <- h22 <- sigma
h21 <- g1 <- g2 <- 0
fApB <- deci*A + B
bindex <- fApB >= 0
p[bindex] <- exp(-fApB[bindex])/(1 + exp(-fApB[bindex]))
q[bindex] <- 1/(1+exp(-fApB[bindex]))
bindex <- fApB < 0
p[bindex] <- 1/(1 + exp(fApB[bindex]))
q[bindex] <- exp(fApB[bindex])/(1 + exp(fApB[bindex]))
d2 <- p*q
h11 <- h11 + sum(d2*deci^2)
h22 <- h22 + sum(d2)
h21 <- h21 + sum(deci*d2)
d1 <- t - p
g1 <- g1 + sum(deci*d1)
g2 <- g2 + sum(d1)
## Stopping Criteria
if (abs(g1) < eps && abs(g2) < eps)
break
## Finding Newton Direction -inv(t(H))%*%g
det <- h11*h22 - h21^2
dA <- -(h22*g1 - h21*g2) / det
dB <- -(-h21*g1 + h11*g2) / det
gd <- g1*dA + g2*dB
## Line Search
stepsize <- 1
while(stepsize >= minstep)
{
newA <- A + stepsize * dA
newB <- B + stepsize * dB
## New function value
newf <- 0
fApB <- deci * newA + newB
bindex <- fApB >= 0
newf <- sum(t[bindex] * fApB[bindex] + log(1 + exp(-fApB[bindex])))
newf <- newf + sum((t[!bindex] - 1)*fApB[!bindex] + log(1 + exp(fApB[!bindex])))
## Check decrease
if (newf < (fval + 0.0001 * stepsize * gd))
{
A <- newA
B <- newB
fval <- newf
break
}
else
stepsize <- stepsize/2
}
if (stepsize < minstep)
{
cat("line search fails", A, B, g1, g2, dA, dB, gd)
ret <- .SigmoidPredict(deci, A, B)
return(ret)
}
}
if(it >= maxiter -1)
cat("maximum number of iterations reached",g1,g2)
ret <- list(A=A, B=B)
return(ret)
})
m <- ksvm(K, y, kernel="matrix", type="C-svc", prob.model=TRUE, cross=0)
K <- as.kernelMatrix(matrix(rnorm(100), ncol=10))
y <- factor(c(1,1,1,1,0,0,1,1,0,1))
m <- ksvm(K, y, kernel="matrix", type="C-svc", prob.model=TRUE, cross=0)
m <- ksvm(K, y, kernel="matrix", type="C-svc", prob.model=TRUE)
.probPlatt(1,1)
getFromNamespace(".probPlatt")
getFromNamespace(".probPlatt",envir = "kernlab")
fixInNamespace(".probPlatt", pos="package:kernlab")
library("kernlab")
K <- as.kernelMatrix(matrix(rnorm(100), ncol=10))
y <- factor(c(1,1,1,1,0,0,1,1,0,1))
m <- ksvm(K, y, kernel="matrix", type="C-svc", prob.model=TRUE)
fixInNamespace(".probPlatt", pos="package:kernlab")
m <- kernlab:::.probPlatt
setGeneric(".probPlatt", function(deci, yres) standardGeneric(".probPlatt"))
setMethod(".probPlatt",signature(deci="ANY"),
function(deci,yres)
{
stop("HERE")
cat("HERE")
if (is.matrix(deci))
deci <- as.vector(deci)
if (!is.vector(deci))
stop("input should be matrix or vector")
yres <- as.vector(yres)
## Create label and count priors
boolabel <- yres >= 0
prior1 <- sum(boolabel)
m <- length(yres)
prior0 <- m - prior1
## set parameters (should be on the interface I guess)
maxiter <- 100
minstep <- 1e-10
sigma <- 1e-3
eps <- 1e-5
## Construct target support
hiTarget <- (prior1 + 1)/(prior1 + 2)
loTarget <- 1/(prior0 + 2)
length <- prior1 + prior0
t <- rep(loTarget, m)
t[boolabel] <- hiTarget
##Initial Point & Initial Fun Value
A <- 0
B <- log((prior0 + 1)/(prior1 + 1))
fval <- 0
fApB <- deci*A + B
bindex <- fApB >= 0
p <- q <- rep(0,m)
fval <- sum(t[bindex]*fApB[bindex] + log(1 + exp(-fApB[bindex])))
fval <- fval + sum((t[!bindex] - 1)*fApB[!bindex] + log(1+exp(fApB[!bindex])))
for (it in 1:maxiter)
{
h11 <- h22 <- sigma
h21 <- g1 <- g2 <- 0
fApB <- deci*A + B
bindex <- fApB >= 0
p[bindex] <- exp(-fApB[bindex])/(1 + exp(-fApB[bindex]))
q[bindex] <- 1/(1+exp(-fApB[bindex]))
bindex <- fApB < 0
p[bindex] <- 1/(1 + exp(fApB[bindex]))
q[bindex] <- exp(fApB[bindex])/(1 + exp(fApB[bindex]))
d2 <- p*q
h11 <- h11 + sum(d2*deci^2)
h22 <- h22 + sum(d2)
h21 <- h21 + sum(deci*d2)
d1 <- t - p
g1 <- g1 + sum(deci*d1)
g2 <- g2 + sum(d1)
## Stopping Criteria
if (abs(g1) < eps && abs(g2) < eps)
break
## Finding Newton Direction -inv(t(H))%*%g
det <- h11*h22 - h21^2
dA <- -(h22*g1 - h21*g2) / det
dB <- -(-h21*g1 + h11*g2) / det
gd <- g1*dA + g2*dB
## Line Search
stepsize <- 1
while(stepsize >= minstep)
{
newA <- A + stepsize * dA
newB <- B + stepsize * dB
## New function value
newf <- 0
fApB <- deci * newA + newB
bindex <- fApB >= 0
newf <- sum(t[bindex] * fApB[bindex] + log(1 + exp(-fApB[bindex])))
newf <- newf + sum((t[!bindex] - 1)*fApB[!bindex] + log(1 + exp(fApB[!bindex])))
## Check decrease
if (newf < (fval + 0.0001 * stepsize * gd))
{
A <- newA
B <- newB
fval <- newf
break
}
else
stepsize <- stepsize/2
}
if (stepsize < minstep)
{
cat("line search fails", A, B, g1, g2, dA, dB, gd)
ret <- .SigmoidPredict(deci, A, B)
return(ret)
}
}
if(it >= maxiter -1)
cat("maximum number of iterations reached",g1,g2)
ret <- list(A=A, B=B)
return(ret)
})
assignInMyNamespace("kernlab:::.probPlatt", .probPlatt)
kernlab:::.probPlatt <- .probPlatt
environment(kernlab:::.probPlatt)
environment(kernlab:::.probPlatt) <- .probPlatt
test <- function(){
cat("Hello")
}
environment(kernlab:::.probPlatt) <- test
library("R.utils")
install.packages("R.utils")
library("R.utils")
assignInNamespace("kernalb:::.probPlatt", test, ".probPlatt")
assignInNamespace("kernalb:::.probPlatt", test, "kernlab")
assignInNamespace(".probPlatt", test, "kernlab")
m <- ksvm(K, y, kernel="matrix", type="C-svc", prob.model=TRUE)
assignInNamespace(".probPlatt", .probPlatt, "kernlab")
m <- ksvm(K, y, kernel="matrix", type="C-svc", prob.model=TRUE)
xmatrix(m)
K <- matrix(rnorm(100), ncol=10))
y <- factor(c(1,1,1,1,0,0,1,1,0,1))
K <- matrix(rnorm(100), ncol=10)
y <- factor(c(1,1,1,1,0,0,1,1,0,1))
m <- ksvm(y~K, kernel="vanilladot", type="C-svc", prob.model=TRUE)
library(caret)
train()
train??
=
help(train)
1:2
setwd("/home/matthias/Documents/MasterThesis/MasterThesis/Data/results/bootstrap_results/")
aucs <- data.frame(
"Factor" = rep(NA, 100),
"Hydro" = NA,
"Blomap" = NA,
"AAC" = NA,
"QSO" = NA,
"PAAC" = NA,
"APAAC" = NA,
"Blosum62" = NA,
"Blosum35" = NA,
"Wen" = NA
)
for(i in 1:100){
table.name <- paste("iteration_", i, ".txt", sep="")
d <- read.csv(table.name, sep=" ")
## AUCS ##
aucs$Factor[i] <- auc(d$Immunogenicity, d$Factor)
aucs$Hydro[i] <- auc(d$Immunogenicity, d$Hydro)
aucs$Blomap[i] <- auc(d$Immunogenicity, d$Blomap)
aucs$AAC[i] <- auc(d$Immunogenicity, d$AAC)
aucs$QSO[i] <- auc(d$Immunogenicity, d$QSO)
aucs$PAAC[i] <- auc(d$Immunogenicity, d$PAAC)
aucs$APAAC[i] <- auc(d$Immunogenicity, d$APAAC)
aucs$Blosum62[i] <- auc(d$Immunogenicity, d$Blosum62)
aucs$Blosum35[i] <- auc(d$Immunogenicity, d$Blosum35)
aucs$Wen[i] <- auc(d$Immunogenicity, d$Wen)
}
library(pROC)
library(ggplot2)
library(reshape)
setwd("/home/matthias/Documents/MasterThesis/MasterThesis/Data/results/bootstrap_results/")
aucs <- data.frame(
"Factor" = rep(NA, 100),
"Hydro" = NA,
"Blomap" = NA,
"AAC" = NA,
"QSO" = NA,
"PAAC" = NA,
"APAAC" = NA,
"Blosum62" = NA,
"Blosum35" = NA,
"Wen" = NA
)
for(i in 1:100){
table.name <- paste("iteration_", i, ".txt", sep="")
d <- read.csv(table.name, sep=" ")
## AUCS ##
aucs$Factor[i] <- auc(d$Immunogenicity, d$Factor)
aucs$Hydro[i] <- auc(d$Immunogenicity, d$Hydro)
aucs$Blomap[i] <- auc(d$Immunogenicity, d$Blomap)
aucs$AAC[i] <- auc(d$Immunogenicity, d$AAC)
aucs$QSO[i] <- auc(d$Immunogenicity, d$QSO)
aucs$PAAC[i] <- auc(d$Immunogenicity, d$PAAC)
aucs$APAAC[i] <- auc(d$Immunogenicity, d$APAAC)
aucs$Blosum62[i] <- auc(d$Immunogenicity, d$Blosum62)
aucs$Blosum35[i] <- auc(d$Immunogenicity, d$Blosum35)
aucs$Wen[i] <- auc(d$Immunogenicity, d$Wen)
}
aucs$id <- 1:100
aucsTest <- data.frame(
"id" = 1:100,
"Factor" = aucs$Factor,
"Hydro" = aucs$Hydro,
"Blomap" = aucs$Blomap
)
aucsFull <- aucs %>%
gather(key = "model", value = "AUC", Factor, Hydro, Blomap, AAC, QSO, PAAC, APAAC, Blosum62, Blosum35, Wen) %>%
convert_as_factor(id, model)
#############
### TESTS ###
#############
library(tidyverse)
aucsFull <- aucs %>%
gather(key = "model", value = "AUC", Factor, Hydro, Blomap, AAC, QSO, PAAC, APAAC, Blosum62, Blosum35, Wen) %>%
convert_as_factor(id, model)
library(rstatix)
aucs$id <- 1:100
aucsTest <- data.frame(
"id" = 1:100,
"Factor" = aucs$Factor,
"Hydro" = aucs$Hydro,
"Blomap" = aucs$Blomap
)
aucsFull <- aucs %>%
gather(key = "model", value = "AUC", Factor, Hydro, Blomap, AAC, QSO, PAAC, APAAC, Blosum62, Blosum35, Wen) %>%
convert_as_factor(id, model)
aucsFull %>% group_by(model) %>% summarize(n = n(),
min = fivenum(AUC)[1],
Q1 = fivenum(AUC)[2],
median = fivenum(AUC)[3],
Q3 = fivenum(AUC)[4],
max = fivenum(AUC)[5])
aucsTest <- aucsTest %>%
gather(key = "model", value = "AUC", Factor, Hydro, Blomap) %>%
convert_as_factor(id, model)
### NORMALITY ###
aucsTest %>% group_by(model) %>% shapiro_test(AUC)
version(randomForest)
packageVersion(randomForest)
packageVersion("randomForest")
aucs.aov <- anova_test(data = aucsTest, dv = AUC, wid = id, within = model)
aucs.aov
### Post Hoc Test ###
pwc <- aucsTest %>%
pairwise_t_test(
AUC ~ model, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
packageVersion("pROC")
citation()
packageVersion("rstatix")
packageVersion("pROC")
citation(package = "rstatix")
citation(package = "kernlab")
